"""
Django settings for ArtifactCollection project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Function to determine if the application is running in a production environment
def is_production():
    return os.environ.get('DJANGO_ENV') == 'production'


on_production = is_production()

USE_TOOLBAR = True
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', None)
if not SECRET_KEY:
  SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)
DJANGO_ENVIRONMENT = config("DJANGO_ENVIRONMENT", default="production")
SITE_ID = 1

ALLOWED_HOSTS = [
    "*.harpercollection.info",
    "harpercollection.info",
    "www.harpercollection.info'",
    "harpertest.django.group",
    "dev.harpertest.django.group",
    "localhost",

]
INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]
FRONTEND_DIR = os.path.join(BASE_DIR, 'frontend')

CORS_ALLOWED_ORIGINS = [
    "https://harpercollection.info",
    "http://localhost*",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://127.0.0.1*",
  "http://127.0.0.1:5173"
]
if DEBUG:
    print("cool debug bro")
    ALLOWED_HOSTS += ["*"]
    USE_DEBUG_TOOL = True
else:
    USE_DEBUG_TOOL = False

print(USE_DEBUG_TOOL)
# Application definition

INSTALLED_APPS = [
    # "clearcache",
    "grappelli",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.flatpages",
    "django.contrib.sites",
    "debug_toolbar",

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',  # or any other provider you want to use

    "bootstrap4",
    "django_filters",
    "crispy_forms",
    "crispy_bootstrap4",
    "django_tables2",
    'rest_framework',

    'dal',
    'dal_select2',
    # 'autocomplete',
    # 'webpack_loader',
    "corsheaders",
    'dynamic_breadcrumbs',
    'django_extensions',
    'artifacts.apps.ArtifactsConfig',
    'core.apps.CoreAppConfig',
    'data_service.apps.DataServiceConfig',
    'drf_generators',
    "django_vite",

]
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]
DJANGO_VITE_ASSETS_PATH = BASE_DIR / "static" / "dist"

# use HMR or not.
DJANGO_VITE_DEV_MODE = False # Debu



REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}



MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",

    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",

    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    "allauth.account.middleware.AccountMiddleware",
]

if DEBUG:
    MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")

ROOT_URLCONF = "ArtifactCollection.urls"

AUTHENTICATION_BACKENDS = [
    # ...
    'allauth.account.auth_backends.AuthenticationBackend',
    # ...
]
AUTH_USER_MODEL = 'core.CustomUser'

LOGIN_REDIRECT_URL = '/dashboard/'
ACCOUNT_LOGOUT_REDIRECT_URL = '/'
ACCOUNT_ADAPTER = 'ArtifactCollection.adapters.MyAccountAdapter'  # Create a custom adapter if needed

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",

                "django.template.context_processors.static",

                "dynamic_breadcrumbs.context_processors.breadcrumbs",

            ],
        },
    },
]

WSGI_APPLICATION = "ArtifactCollection.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

from django.utils.log import DEFAULT_LOGGING

# Create a directory for log files if it doesn't exist
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOGS_DIR, exist_ok=True)

# Define the logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'debug.log'),
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
        # Add additional handlers for external services (e.g., Sentry, ELK stack)
        # ...
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'your_app_name': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        # Add loggers for third-party apps if needed
        # ...
    },
}
# Merge with the default logging configuration
INIT_LOGGING = DEFAULT_LOGGING.copy()

LOGGING.update(INIT_LOGGING)

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

TEMPLATED_EMAIL_BACKEND = "templated_email.backends.vanilla_django"
DEFAULT_FROM_EMAIL = "info@harpercollection.info"

if DJANGO_ENVIRONMENT not in ["development", "production"]:
    EMAIL_BACKEND = config(
        "EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend"
    )
else:
    EMAIL_BACKEND = config(
        "EMAIL_BACKEND", default="django.core.mail.backends.smtp.EmailBackend"
    )

EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST = "mail.wservices.ch"
EMAIL_HOST_USER = "info@harpercollection.info"
EMAIL_HOST_PASSWORD = "Sudanarchives"
DEFAULT_FROM_EMAIL = "info@harpercollection.info"
SERVER_EMAIL = "mail.wservices.ch"

BREADCRUMBS_TEMPLATE = "view_breadcrumbs/bootstrap4.html"

USE_DEBUG_TOOL = config("USE_DEBUG", default=False, cast=bool)
if USE_DEBUG_TOOL:
    INSTALLED_APPS.append("debug_toolbar")

from django.contrib.messages import constants as message_constants

MESSAGE_TAGS = {
    message_constants.DEBUG: "secondary",
    message_constants.INFO: "info",
    message_constants.SUCCESS: "success",
    message_constants.WARNING: "warning",
    message_constants.ERROR: "danger",
}

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"
CRISPY_TEMPLATE_PACK = "bootstrap4"
DJANGO_TABLES2_TEMPLATE = "django_tables2/bootstrap4.html"

BOOTSTRAP4 = {
    # Label class to use in horizontal forms
    # this controls the size of the label container
    # default is col-md-3
    "horizontal_label_class": "col-md-1",
    # field_name size
    # default 'horizontal_field_class': 'col-md-9',
    "horizontal_field_class": "col-md-5",
}

META_SITE_NAME = "Harper Collection"
META_DEFAULT_KEYWORDS = "Arrow Heads, Collection, Native American Arrow Heads"
META_USE_TWITTER_PROPERTIES = True
META_USE_OG_PROPERTIES = True
META_SITE_PROTOCOL = config("META_SITE_PROTOCOL", default="http")
META_SITE_DOMAIN = "harpercollection.info"
CELERY_TIMEZONE = TIME_ZONE

ADMINS = [("Reed", "reedjones760@yahoo.com"), ("Darrell", "jhonson@well.com")]
ADMIN_CONTACT_EMAIL = "admin@harpercollection.info"
ADMIN_NOTIFY_EMAIL = "jhonson@well.com"
if DJANGO_ENVIRONMENT == "development":
    SITE_URL = "http://harpertest.django.group"
elif DJANGO_ENVIRONMENT == "production":
    SITE_URL = "http://harpercollection.info"
else:
    SITE_URL = "http://localhost:8000"

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'assets'),
    # os.path.join(BASE_DIR, 'frontend'),
    DJANGO_VITE_ASSETS_PATH

]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Collectstatic directory in production

# Media files (User-uploaded content)
MEDIA_URL = '/media/'

# Public media directory accessible to all
PUBLIC_MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Private media directory accessible to authenticated users of a specific group
PRIVATE_MEDIA_ROOT = os.path.join(BASE_DIR, 'private_media')

if is_production():
    MEDIA_ROOT = PUBLIC_MEDIA_ROOT
else:
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DEFAULT_FILE_STORAGE = 'your_project.storage_backends.PublicMediaStorage'  # Change this to your actual storage backend
PRIVATE_FILE_STORAGE = 'your_project.storage_backends.PrivateMediaStorage'  # Change this to your actual storage backend

FILE_UPLOAD_HANDLERS = ["django.core.files.uploadhandler.TemporaryFileUploadHandler"]

RECAPTCHA_PUBLIC_KEY = "6Ldw5h0mAAAAAHMfIn951m1zU0jm0ITuOl8b8Ux5"
RECAPTCHA_PRIVATE_KEY = "6Ldw5h0mAAAAAIvEJqoU4nK-oWMT40hPB4BCbwow"

AWS_ACCESS_KEY_ID = 'your_access_key'
AWS_SECRET_ACCESS_KEY = 'your_secret_key'
AWS_STORAGE_BUCKET_NAME = 'your_bucket_name'
AWS_S3_REGION_NAME = 'your_region_name'
AWS_QUERYSTRING_AUTH = False  # Remove querystring authentication for S3

# Optional: AWS CloudFront CDN URL
AWS_S3_CUSTOM_DOMAIN = 'your-cloudfront-url'  # Example: 'd2xh1p5ka3q6np.cloudfront.net'

if is_production():
    # Use Amazon S3 for storage in production
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
else:
    # Use local storage in development
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.IsAdminUser',
        'rest_framework.permissions.AllowAny',

    ),
}

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}
